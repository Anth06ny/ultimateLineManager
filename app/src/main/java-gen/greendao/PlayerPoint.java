package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PLAYER_POINT.
 */
public class PlayerPoint {

    private Long id;
    /** Not-null value. */
    private String role;
    private long playerId;
    private long pointId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PlayerPointDao myDao;

    private PlayerBean playerBean;
    private Long playerBean__resolvedKey;

    private PointBean pointBean;
    private Long pointBean__resolvedKey;


    public PlayerPoint() {
    }

    public PlayerPoint(Long id) {
        this.id = id;
    }

    public PlayerPoint(Long id, String role, long playerId, long pointId) {
        this.id = id;
        this.role = role;
        this.playerId = playerId;
        this.pointId = pointId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlayerPointDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRole() {
        return role;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRole(String role) {
        this.role = role;
    }

    public long getPlayerId() {
        return playerId;
    }

    public void setPlayerId(long playerId) {
        this.playerId = playerId;
    }

    public long getPointId() {
        return pointId;
    }

    public void setPointId(long pointId) {
        this.pointId = pointId;
    }

    /** To-one relationship, resolved on first access. */
    public PlayerBean getPlayerBean() {
        long __key = this.playerId;
        if (playerBean__resolvedKey == null || !playerBean__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlayerBeanDao targetDao = daoSession.getPlayerBeanDao();
            PlayerBean playerBeanNew = targetDao.load(__key);
            synchronized (this) {
                playerBean = playerBeanNew;
            	playerBean__resolvedKey = __key;
            }
        }
        return playerBean;
    }

    public void setPlayerBean(PlayerBean playerBean) {
        if (playerBean == null) {
            throw new DaoException("To-one property 'playerId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.playerBean = playerBean;
            playerId = playerBean.getId();
            playerBean__resolvedKey = playerId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PointBean getPointBean() {
        long __key = this.pointId;
        if (pointBean__resolvedKey == null || !pointBean__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PointBeanDao targetDao = daoSession.getPointBeanDao();
            PointBean pointBeanNew = targetDao.load(__key);
            synchronized (this) {
                pointBean = pointBeanNew;
            	pointBean__resolvedKey = __key;
            }
        }
        return pointBean;
    }

    public void setPointBean(PointBean pointBean) {
        if (pointBean == null) {
            throw new DaoException("To-one property 'pointId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.pointBean = pointBean;
            pointId = pointBean.getId();
            pointBean__resolvedKey = pointId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
