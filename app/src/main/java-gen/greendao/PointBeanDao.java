package greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.PointBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table POINT_BEAN.
*/
public class PointBeanDao extends AbstractDao<PointBean, Long> {

    public static final String TABLENAME = "POINT_BEAN";

    /**
     * Properties of entity PointBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Start = new Property(1, java.util.Date.class, "start", false, "START");
        public final static Property Stop = new Property(2, java.util.Date.class, "stop", false, "STOP");
        public final static Property Length = new Property(3, long.class, "length", false, "LENGTH");
        public final static Property PauseTime = new Property(4, java.util.Date.class, "pauseTime", false, "PAUSE_TIME");
        public final static Property Pause = new Property(5, Boolean.class, "pause", false, "PAUSE");
        public final static Property TeamOffense = new Property(6, Boolean.class, "teamOffense", false, "TEAM_OFFENSE");
        public final static Property TeamGoal = new Property(7, Boolean.class, "teamGoal", false, "TEAM_GOAL");
        public final static Property MatchId = new Property(8, long.class, "matchId", false, "MATCH_ID");
    };

    private DaoSession daoSession;

    private Query<PointBean> matchBean_PointBeanListQuery;

    public PointBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PointBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'POINT_BEAN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'START' INTEGER," + // 1: start
                "'STOP' INTEGER," + // 2: stop
                "'LENGTH' INTEGER NOT NULL ," + // 3: length
                "'PAUSE_TIME' INTEGER," + // 4: pauseTime
                "'PAUSE' INTEGER," + // 5: pause
                "'TEAM_OFFENSE' INTEGER," + // 6: teamOffense
                "'TEAM_GOAL' INTEGER," + // 7: teamGoal
                "'MATCH_ID' INTEGER NOT NULL );"); // 8: matchId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'POINT_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PointBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date start = entity.getStart();
        if (start != null) {
            stmt.bindLong(2, start.getTime());
        }
 
        java.util.Date stop = entity.getStop();
        if (stop != null) {
            stmt.bindLong(3, stop.getTime());
        }
        stmt.bindLong(4, entity.getLength());
 
        java.util.Date pauseTime = entity.getPauseTime();
        if (pauseTime != null) {
            stmt.bindLong(5, pauseTime.getTime());
        }
 
        Boolean pause = entity.getPause();
        if (pause != null) {
            stmt.bindLong(6, pause ? 1l: 0l);
        }
 
        Boolean teamOffense = entity.getTeamOffense();
        if (teamOffense != null) {
            stmt.bindLong(7, teamOffense ? 1l: 0l);
        }
 
        Boolean teamGoal = entity.getTeamGoal();
        if (teamGoal != null) {
            stmt.bindLong(8, teamGoal ? 1l: 0l);
        }
        stmt.bindLong(9, entity.getMatchId());
    }

    @Override
    protected void attachEntity(PointBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PointBean readEntity(Cursor cursor, int offset) {
        PointBean entity = new PointBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // start
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // stop
            cursor.getLong(offset + 3), // length
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // pauseTime
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // pause
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // teamOffense
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // teamGoal
            cursor.getLong(offset + 8) // matchId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PointBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStart(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setStop(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setLength(cursor.getLong(offset + 3));
        entity.setPauseTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setPause(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setTeamOffense(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setTeamGoal(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setMatchId(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PointBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PointBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pointBeanList" to-many relationship of MatchBean. */
    public List<PointBean> _queryMatchBean_PointBeanList(long matchId) {
        synchronized (this) {
            if (matchBean_PointBeanListQuery == null) {
                QueryBuilder<PointBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MatchId.eq(null));
                matchBean_PointBeanListQuery = queryBuilder.build();
            }
        }
        Query<PointBean> query = matchBean_PointBeanListQuery.forCurrentThread();
        query.setParameter(0, matchId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMatchBeanDao().getAllColumns());
            builder.append(" FROM POINT_BEAN T");
            builder.append(" LEFT JOIN MATCH_BEAN T0 ON T.'MATCH_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PointBean loadCurrentDeep(Cursor cursor, boolean lock) {
        PointBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MatchBean matchBean = loadCurrentOther(daoSession.getMatchBeanDao(), cursor, offset);
         if(matchBean != null) {
            entity.setMatchBean(matchBean);
        }

        return entity;    
    }

    public PointBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PointBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PointBean> list = new ArrayList<PointBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PointBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PointBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
