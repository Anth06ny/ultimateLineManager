package greendao;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table POINT_BEAN.
 */
public class PointBean {

    private Long id;
    private java.util.Date start;
    private long length;
    private long matchId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PointBeanDao myDao;

    private MatchBean matchBean;
    private Long matchBean__resolvedKey;

    private List<PlayerPoint> playerPointList;

    public PointBean() {
    }

    public PointBean(Long id) {
        this.id = id;
    }

    public PointBean(Long id, java.util.Date start, long length, long matchId) {
        this.id = id;
        this.start = start;
        this.length = length;
        this.matchId = matchId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPointBeanDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getStart() {
        return start;
    }

    public void setStart(java.util.Date start) {
        this.start = start;
    }

    public long getLength() {
        return length;
    }

    public void setLength(long length) {
        this.length = length;
    }

    public long getMatchId() {
        return matchId;
    }

    public void setMatchId(long matchId) {
        this.matchId = matchId;
    }

    /** To-one relationship, resolved on first access. */
    public MatchBean getMatchBean() {
        long __key = this.matchId;
        if (matchBean__resolvedKey == null || !matchBean__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatchBeanDao targetDao = daoSession.getMatchBeanDao();
            MatchBean matchBeanNew = targetDao.load(__key);
            synchronized (this) {
                matchBean = matchBeanNew;
            	matchBean__resolvedKey = __key;
            }
        }
        return matchBean;
    }

    public void setMatchBean(MatchBean matchBean) {
        if (matchBean == null) {
            throw new DaoException("To-one property 'matchId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.matchBean = matchBean;
            matchId = matchBean.getId();
            matchBean__resolvedKey = matchId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PlayerPoint> getPlayerPointList() {
        if (playerPointList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlayerPointDao targetDao = daoSession.getPlayerPointDao();
            List<PlayerPoint> playerPointListNew = targetDao._queryPointBean_PlayerPointList(id);
            synchronized (this) {
                if(playerPointList == null) {
                    playerPointList = playerPointListNew;
                }
            }
        }
        return playerPointList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlayerPointList() {
        playerPointList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
