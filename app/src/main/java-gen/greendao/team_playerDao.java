package greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.team_player;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEAM_PLAYER.
*/
public class team_playerDao extends AbstractDao<team_player, Long> {

    public static final String TABLENAME = "TEAM_PLAYER";

    /**
     * Properties of entity team_player.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TeamId = new Property(1, Long.class, "teamId", false, "TEAM_ID");
        public final static Property PlayerId = new Property(2, Long.class, "playerId", false, "PLAYER_ID");
    };

    private DaoSession daoSession;


    public team_playerDao(DaoConfig config) {
        super(config);
    }
    
    public team_playerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEAM_PLAYER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TEAM_ID' INTEGER," + // 1: teamId
                "'PLAYER_ID' INTEGER);"); // 2: playerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEAM_PLAYER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, team_player entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long teamId = entity.getTeamId();
        if (teamId != null) {
            stmt.bindLong(2, teamId);
        }
 
        Long playerId = entity.getPlayerId();
        if (playerId != null) {
            stmt.bindLong(3, playerId);
        }
    }

    @Override
    protected void attachEntity(team_player entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public team_player readEntity(Cursor cursor, int offset) {
        team_player entity = new team_player( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // teamId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // playerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, team_player entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTeamId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPlayerId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(team_player entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(team_player entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTeamBeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPlayerBeanDao().getAllColumns());
            builder.append(" FROM TEAM_PLAYER T");
            builder.append(" LEFT JOIN TEAM_BEAN T0 ON T.'TEAM_ID'=T0.'_id'");
            builder.append(" LEFT JOIN PLAYER_BEAN T1 ON T.'PLAYER_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected team_player loadCurrentDeep(Cursor cursor, boolean lock) {
        team_player entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TeamBean teamBean = loadCurrentOther(daoSession.getTeamBeanDao(), cursor, offset);
        entity.setTeamBean(teamBean);
        offset += daoSession.getTeamBeanDao().getAllColumns().length;

        PlayerBean playerBean = loadCurrentOther(daoSession.getPlayerBeanDao(), cursor, offset);
        entity.setPlayerBean(playerBean);

        return entity;    
    }

    public team_player loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<team_player> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<team_player> list = new ArrayList<team_player>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<team_player> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<team_player> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
