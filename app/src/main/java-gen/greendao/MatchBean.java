package greendao;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MATCH_BEAN.
 */
public class MatchBean {

    private Long id;
    /** Not-null value. */
    private String name;
    private java.util.Date start;
    private java.util.Date end;
    private int currentPoint;
    private long teamId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MatchBeanDao myDao;

    private TeamBean teamBean;
    private Long teamBean__resolvedKey;

    private List<PointBean> pointBeanList;
    private List<StatePlayerBean> statePlayerBeanList;

    public MatchBean() {
    }

    public MatchBean(Long id) {
        this.id = id;
    }

    public MatchBean(Long id, String name, java.util.Date start, java.util.Date end, int currentPoint, long teamId) {
        this.id = id;
        this.name = name;
        this.start = start;
        this.end = end;
        this.currentPoint = currentPoint;
        this.teamId = teamId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMatchBeanDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public java.util.Date getStart() {
        return start;
    }

    public void setStart(java.util.Date start) {
        this.start = start;
    }

    public java.util.Date getEnd() {
        return end;
    }

    public void setEnd(java.util.Date end) {
        this.end = end;
    }

    public int getCurrentPoint() {
        return currentPoint;
    }

    public void setCurrentPoint(int currentPoint) {
        this.currentPoint = currentPoint;
    }

    public long getTeamId() {
        return teamId;
    }

    public void setTeamId(long teamId) {
        this.teamId = teamId;
    }

    /** To-one relationship, resolved on first access. */
    public TeamBean getTeamBean() {
        long __key = this.teamId;
        if (teamBean__resolvedKey == null || !teamBean__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeamBeanDao targetDao = daoSession.getTeamBeanDao();
            TeamBean teamBeanNew = targetDao.load(__key);
            synchronized (this) {
                teamBean = teamBeanNew;
            	teamBean__resolvedKey = __key;
            }
        }
        return teamBean;
    }

    public void setTeamBean(TeamBean teamBean) {
        if (teamBean == null) {
            throw new DaoException("To-one property 'teamId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.teamBean = teamBean;
            teamId = teamBean.getId();
            teamBean__resolvedKey = teamId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PointBean> getPointBeanList() {
        if (pointBeanList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PointBeanDao targetDao = daoSession.getPointBeanDao();
            List<PointBean> pointBeanListNew = targetDao._queryMatchBean_PointBeanList(id);
            synchronized (this) {
                if(pointBeanList == null) {
                    pointBeanList = pointBeanListNew;
                }
            }
        }
        return pointBeanList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPointBeanList() {
        pointBeanList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StatePlayerBean> getStatePlayerBeanList() {
        if (statePlayerBeanList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StatePlayerBeanDao targetDao = daoSession.getStatePlayerBeanDao();
            List<StatePlayerBean> statePlayerBeanListNew = targetDao._queryMatchBean_StatePlayerBeanList(id);
            synchronized (this) {
                if(statePlayerBeanList == null) {
                    statePlayerBeanList = statePlayerBeanListNew;
                }
            }
        }
        return statePlayerBeanList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStatePlayerBeanList() {
        statePlayerBeanList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
