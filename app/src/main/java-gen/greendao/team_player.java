package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TEAM_PLAYER.
 */
public class team_player {

    private Long id;
    private Long teamId;
    private Long playerId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient team_playerDao myDao;

    private TeamBean teamBean;
    private Long teamBean__resolvedKey;

    private PlayerBean playerBean;
    private Long playerBean__resolvedKey;


    public team_player() {
    }

    public team_player(Long id) {
        this.id = id;
    }

    public team_player(Long id, Long teamId, Long playerId) {
        this.id = id;
        this.teamId = teamId;
        this.playerId = playerId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTeam_playerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getTeamId() {
        return teamId;
    }

    public void setTeamId(Long teamId) {
        this.teamId = teamId;
    }

    public Long getPlayerId() {
        return playerId;
    }

    public void setPlayerId(Long playerId) {
        this.playerId = playerId;
    }

    /** To-one relationship, resolved on first access. */
    public TeamBean getTeamBean() {
        Long __key = this.teamId;
        if (teamBean__resolvedKey == null || !teamBean__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeamBeanDao targetDao = daoSession.getTeamBeanDao();
            TeamBean teamBeanNew = targetDao.load(__key);
            synchronized (this) {
                teamBean = teamBeanNew;
            	teamBean__resolvedKey = __key;
            }
        }
        return teamBean;
    }

    public void setTeamBean(TeamBean teamBean) {
        synchronized (this) {
            this.teamBean = teamBean;
            teamId = teamBean == null ? null : teamBean.getId();
            teamBean__resolvedKey = teamId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PlayerBean getPlayerBean() {
        Long __key = this.playerId;
        if (playerBean__resolvedKey == null || !playerBean__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlayerBeanDao targetDao = daoSession.getPlayerBeanDao();
            PlayerBean playerBeanNew = targetDao.load(__key);
            synchronized (this) {
                playerBean = playerBeanNew;
            	playerBean__resolvedKey = __key;
            }
        }
        return playerBean;
    }

    public void setPlayerBean(PlayerBean playerBean) {
        synchronized (this) {
            this.playerBean = playerBean;
            playerId = playerBean == null ? null : playerBean.getId();
            playerBean__resolvedKey = playerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
