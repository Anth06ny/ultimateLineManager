package greendao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.TeamBean;
import greendao.PlayerBean;
import greendao.TeamPlayer;
import greendao.MatchBean;
import greendao.PointBean;
import greendao.PlayerPoint;
import greendao.StatePlayerBean;

import greendao.TeamBeanDao;
import greendao.PlayerBeanDao;
import greendao.TeamPlayerDao;
import greendao.MatchBeanDao;
import greendao.PointBeanDao;
import greendao.PlayerPointDao;
import greendao.StatePlayerBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig teamBeanDaoConfig;
    private final DaoConfig playerBeanDaoConfig;
    private final DaoConfig teamPlayerDaoConfig;
    private final DaoConfig matchBeanDaoConfig;
    private final DaoConfig pointBeanDaoConfig;
    private final DaoConfig playerPointDaoConfig;
    private final DaoConfig statePlayerBeanDaoConfig;

    private final TeamBeanDao teamBeanDao;
    private final PlayerBeanDao playerBeanDao;
    private final TeamPlayerDao teamPlayerDao;
    private final MatchBeanDao matchBeanDao;
    private final PointBeanDao pointBeanDao;
    private final PlayerPointDao playerPointDao;
    private final StatePlayerBeanDao statePlayerBeanDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        teamBeanDaoConfig = daoConfigMap.get(TeamBeanDao.class).clone();
        teamBeanDaoConfig.initIdentityScope(type);

        playerBeanDaoConfig = daoConfigMap.get(PlayerBeanDao.class).clone();
        playerBeanDaoConfig.initIdentityScope(type);

        teamPlayerDaoConfig = daoConfigMap.get(TeamPlayerDao.class).clone();
        teamPlayerDaoConfig.initIdentityScope(type);

        matchBeanDaoConfig = daoConfigMap.get(MatchBeanDao.class).clone();
        matchBeanDaoConfig.initIdentityScope(type);

        pointBeanDaoConfig = daoConfigMap.get(PointBeanDao.class).clone();
        pointBeanDaoConfig.initIdentityScope(type);

        playerPointDaoConfig = daoConfigMap.get(PlayerPointDao.class).clone();
        playerPointDaoConfig.initIdentityScope(type);

        statePlayerBeanDaoConfig = daoConfigMap.get(StatePlayerBeanDao.class).clone();
        statePlayerBeanDaoConfig.initIdentityScope(type);

        teamBeanDao = new TeamBeanDao(teamBeanDaoConfig, this);
        playerBeanDao = new PlayerBeanDao(playerBeanDaoConfig, this);
        teamPlayerDao = new TeamPlayerDao(teamPlayerDaoConfig, this);
        matchBeanDao = new MatchBeanDao(matchBeanDaoConfig, this);
        pointBeanDao = new PointBeanDao(pointBeanDaoConfig, this);
        playerPointDao = new PlayerPointDao(playerPointDaoConfig, this);
        statePlayerBeanDao = new StatePlayerBeanDao(statePlayerBeanDaoConfig, this);

        registerDao(TeamBean.class, teamBeanDao);
        registerDao(PlayerBean.class, playerBeanDao);
        registerDao(TeamPlayer.class, teamPlayerDao);
        registerDao(MatchBean.class, matchBeanDao);
        registerDao(PointBean.class, pointBeanDao);
        registerDao(PlayerPoint.class, playerPointDao);
        registerDao(StatePlayerBean.class, statePlayerBeanDao);
    }
    
    public void clear() {
        teamBeanDaoConfig.getIdentityScope().clear();
        playerBeanDaoConfig.getIdentityScope().clear();
        teamPlayerDaoConfig.getIdentityScope().clear();
        matchBeanDaoConfig.getIdentityScope().clear();
        pointBeanDaoConfig.getIdentityScope().clear();
        playerPointDaoConfig.getIdentityScope().clear();
        statePlayerBeanDaoConfig.getIdentityScope().clear();
    }

    public TeamBeanDao getTeamBeanDao() {
        return teamBeanDao;
    }

    public PlayerBeanDao getPlayerBeanDao() {
        return playerBeanDao;
    }

    public TeamPlayerDao getTeamPlayerDao() {
        return teamPlayerDao;
    }

    public MatchBeanDao getMatchBeanDao() {
        return matchBeanDao;
    }

    public PointBeanDao getPointBeanDao() {
        return pointBeanDao;
    }

    public PlayerPointDao getPlayerPointDao() {
        return playerPointDao;
    }

    public StatePlayerBeanDao getStatePlayerBeanDao() {
        return statePlayerBeanDao;
    }

}
